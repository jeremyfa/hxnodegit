package nodegit;
@:jsRequire("nodegit", "Remote") extern class Remote {
	static function addFetch(repo:Dynamic, remote:String, refspec:String):Float;
	static function addPush(repo:Dynamic, remote:String, refspec:String):Float;
	static function create(repo:Dynamic, name:String, url:String):Dynamic;
	static function createAnonymous(repo:Dynamic, url:String):Promise<Dynamic>;
	static function createWithFetchspec(repo:Dynamic, name:String, url:String, fetch:String):Promise<Dynamic>;
	static function delete(repo:Dynamic, name:String):Promise<Float>;
	static function initCallbacks(opts:Dynamic, version:Float):Float;
	static function isValidName(remote_name:String):Float;
	static function list(repo:Dynamic):Promise<Array<Dynamic>>;
	static function lookup(repo:Dynamic, name:Dynamic, callback:Dynamic):Promise<Dynamic>;
	static function setAutotag(repo:Dynamic, remote:String, value:Float):Float;
	static function setPushurl(repo:Dynamic, remote:String, url:String):Float;
	static function setUrl(repo:Dynamic, remote:String, url:String):Float;
	function autotag():Float;
	function connect(direction:Dynamic, callbacks:Dynamic, callback:Dynamic):Promise<Float>;
	function connected():Float;
	function defaultBranch():Promise<Dynamic>;
	function disconnect():Promise<Void>;
	function download(refSpecs:Array<Dynamic>, opts:Dynamic, callback:Dynamic):Promise<Float>;
	function dup():Promise<Dynamic>;
	function fetch(refSpecs:Array<Dynamic>, opts:Dynamic, message:String, callback:Dynamic):Promise<Float>;
	function free():Void;
	function getFetchRefspecs():Promise<Array<Dynamic>>;
	function getPushRefspecs():Promise<Array<Dynamic>>;
	function getRefspec(n:Float):Dynamic;
	function name():String;
	function owner():Dynamic;
	function prune(callbacks:Dynamic):Float;
	function pruneRefs():Float;
	function push(refSpecs:Array<Dynamic>, options:Dynamic, callback:Dynamic):Promise<Float>;
	function pushurl():String;
	function refspecCount():Float;
	function stats():Dynamic;
	function stop():Void;
	function updateTips(callbacks:Dynamic, update_fetchhead:Float, download_tags:Float, reflog_message:String):Float;
	function upload(refspecs:Dynamic, opts:Dynamic):Float;
	function url():String;
	static var AUTOTAG_OPTION : Dynamic;
	static var COMPLETION_TYPE : Dynamic;
}