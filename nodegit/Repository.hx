package nodegit;
@:jsRequire("nodegit", "Repository") extern class Repository {
	static function discover(start_path:String, across_fs:Float, ceiling_dirs:String):js.Promise<Dynamic>;
	static function init(path:String, is_bare:Float):js.Promise<nodegit.Repository>;
	static function initExt(repo_path:String, opts:nodegit.RepositoryInitOptions):js.Promise<nodegit.Repository>;
	static function open(path:String):js.Promise<nodegit.Repository>;
	static function openBare(bare_path:String):js.Promise<nodegit.Repository>;
	static function openExt(path:String, flags:Float, ceiling_dirs:String):js.Promise<nodegit.Repository>;
	static function wrapOdb(odb:nodegit.Odb):js.Promise<nodegit.Repository>;
	function checkoutBranch(branch:Dynamic, opts:Dynamic):js.Promise<Void>;
	function config():js.Promise<nodegit.Config>;
	function configSnapshot():js.Promise<nodegit.Config>;
	function continueRebase(signature:nodegit.Signature, beforeNextFn:Dynamic):nodegit.Oid;
	function createBlobFromBuffer(buffer:Dynamic):nodegit.Oid;
	function createBranch(name:String, commit:Dynamic, force:Bool, signature:nodegit.Signature, logMessage:String):js.Promise<nodegit.Reference>;
	function createCommit(updateRef:String, author:nodegit.Signature, committer:nodegit.Signature, message:String, Tree:Dynamic, parents:Array<Dynamic>):js.Promise<nodegit.Oid>;
	function createCommitOnHead(filesToAdd:Array<Dynamic>, author:nodegit.Signature, committer:nodegit.Signature, message:String):js.Promise<nodegit.Oid>;
	function createLightweightTag(String:Dynamic, name:String):js.Promise<nodegit.Reference>;
	function createRevWalk(String:Dynamic):Dynamic;
	function createTag(String:Dynamic, name:String, message:String):js.Promise<nodegit.Tag>;
	function defaultSignature():nodegit.Signature;
	function deleteTagByName(Short:String):js.Promise<Void>;
	function detachHead():Dynamic;
	function fetch(remote:Dynamic, fetchOptions:Dynamic):Void;
	function fetchAll(fetchOptions:Dynamic, callback:Dynamic):Void;
	function fetchheadForeach(callback:Dynamic):js.Promise<Void>;
	function free():Void;
	function getBlob(String:Dynamic):js.Promise<nodegit.Blob>;
	function getBranch(name:Dynamic):js.Promise<nodegit.Reference>;
	function getBranchCommit(name:Dynamic):js.Promise<nodegit.Commit>;
	function getCommit(String:Dynamic):js.Promise<nodegit.Commit>;
	function getCurrentBranch():js.Promise<nodegit.Reference>;
	function getHeadCommit():js.Promise<nodegit.Commit>;
	function getMasterCommit():js.Promise<nodegit.Commit>;
	function getNamespace():String;
	function getReference(name:Dynamic):js.Promise<nodegit.Reference>;
	function getReferenceCommit(name:Dynamic):js.Promise<nodegit.Commit>;
	function getReferenceNames(type:Dynamic):js.Promise<Array<String>>;
	function getReferences(type:Dynamic):js.Promise<nodegit.Array<Reference>>;
	function getRemote(remote:Dynamic, callback:Dynamic):nodegit.Remote;
	function getRemotes(Optional:Dynamic):nodegit.Object;
	function getStatus(opts:Dynamic):js.Promise<Array<Dynamic>>;
	function getStatusExt(opts:Dynamic):js.Promise<Array<Dynamic>>;
	function getSubmoduleNames():js.Promise<Array<String>>;
	function getTag(String:Dynamic):js.Promise<nodegit.Tag>;
	function getTagByName(Short:String):js.Promise<nodegit.Tag>;
	function getTree(String:Dynamic):js.Promise<nodegit.Tree>;
	function head():js.Promise<nodegit.Reference>;
	function headDetached():Dynamic;
	function headUnborn():Dynamic;
	function index():js.Promise<nodegit.Index>;
	function isApplyingMailbox():Bool;
	function isBare():Float;
	function isBisecting():Bool;
	function isCherrypicking():Bool;
	function isDefaultState():Bool;
	function isEmpty():Dynamic;
	function isMerging():Bool;
	function isRebasing():Bool;
	function isReverting():Bool;
	function isShallow():Float;
	function mergeBranches(to:Dynamic, from:Dynamic, signature:nodegit.Signature, mergePreference:Dynamic, mergeOptions:nodegit.MergeOptions):nodegit.Oid;
	function messageRemove():Float;
	function odb():js.Promise<nodegit.Odb>;
	function path():String;
	function rebaseBranches(branch:String, upstream:String, onto:String, signature:nodegit.Signature, beforeNextFn:Dynamic):nodegit.Oid;
	function refdb():js.Promise<nodegit.Refdb>;
	function setHead(refname:String):js.Promise<Float>;
	function setHeadDetached(commitish:nodegit.Oid):Float;
	function setHeadDetachedFromAnnotated(commitish:nodegit.AnnotatedCommit):Float;
	function setIdent(name:String, email:String):Float;
	function setNamespace(nmspace:String):Float;
	function setWorkdir(workdir:String, update_gitlink:Float):Float;
	function stageFilemode(filePath:Dynamic, stageNew:Bool):js.Promise<Float>;
	function stageLines(filePath:String, newLines:Array<Dynamic>, isStaged:Bool):js.Promise<Float>;
	function state():Float;
	function stateCleanup():Float;
	function treeBuilder(tree:nodegit.Tree):Void;
	function workdir():String;
	static var INIT_FLAG : Dynamic;
	static var INIT_MODE : Dynamic;
	static var OPEN_FLAG : Dynamic;
	static var STATE : Dynamic;
}